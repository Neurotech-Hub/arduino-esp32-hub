# ESP32 Hub Patch for libraries/BLE/src/BLEDevice.h
# Generated: 2024-12-14 10:47:47.090883
# Purpose: Fix BLE memory leaks.
#
--- original/arduino-esp32-3.0.7/libraries/BLE/src/BLEDevice.h	2024-12-14 10:40:05
+++ modified/libraries/BLE/src/BLEDevice.h	2024-12-13 19:03:11
@@ -12,9 +12,9 @@
 
 #include "sdkconfig.h"
 #if defined(CONFIG_BLUEDROID_ENABLED)
-#include <esp_gap_ble_api.h>  // ESP32 BLE
-#include <esp_gattc_api.h>    // ESP32 BLE
-#include <map>                // Part of C++ STL
+#include <esp_gap_ble_api.h> // ESP32 BLE
+#include <esp_gattc_api.h>   // ESP32 BLE
+#include <map>               // Part of C++ STL
 #include <string>
 #include <esp_bt.h>
 
@@ -31,26 +31,26 @@
 typedef void (*gattc_event_handler)(esp_gattc_cb_event_t event, esp_gatt_if_t gattc_if, esp_ble_gattc_cb_param_t *param);
 typedef void (*gatts_event_handler)(esp_gatts_cb_event_t event, esp_gatt_if_t gattc_if, esp_ble_gatts_cb_param_t *param);
 
-class BLEDevice {
+class BLEDevice
+{
 public:
-  static BLEClient *createClient();                                                               // Create a new BLE client.
-  static BLEServer *createServer();                                                               // Create a new BLE server.
-  static BLEAddress getAddress();                                                                 // Retrieve our own local BD address.
-  static BLEScan *getScan();                                                                      // Get the scan object
-  static String getValue(BLEAddress bdAddress, BLEUUID serviceUUID, BLEUUID characteristicUUID);  // Get the value of a characteristic of a service on a server.
-  static void init(String deviceName);                                                            // Initialize the local BLE environment.
-  static void setPower(esp_power_level_t powerLevel, esp_ble_power_type_t powerType = ESP_BLE_PWR_TYPE_DEFAULT);  // Set our power level.
+  static BLEClient *createClient();                                                                              // Create a new BLE client.
+  static BLEServer *createServer();                                                                              // Create a new BLE server.
+  static BLEAddress getAddress();                                                                                // Retrieve our own local BD address.
+  static BLEScan *getScan();                                                                                     // Get the scan object
+  static String getValue(BLEAddress bdAddress, BLEUUID serviceUUID, BLEUUID characteristicUUID);                 // Get the value of a characteristic of a service on a server.
+  static void init(String deviceName);                                                                           // Initialize the local BLE environment.
+  static void setPower(esp_power_level_t powerLevel, esp_ble_power_type_t powerType = ESP_BLE_PWR_TYPE_DEFAULT); // Set our power level.
   static void setValue(
-    BLEAddress bdAddress, BLEUUID serviceUUID, BLEUUID characteristicUUID, String value
-  );                                                // Set the value of a characteristic on a service on a server.
-  static String toString();                         // Return a string representation of our device.
-  static void whiteListAdd(BLEAddress address);     // Add an entry to the BLE white list.
-  static void whiteListRemove(BLEAddress address);  // Remove an entry from the BLE white list.
+      BLEAddress bdAddress, BLEUUID serviceUUID, BLEUUID characteristicUUID, String value); // Set the value of a characteristic on a service on a server.
+  static String toString();                                                                 // Return a string representation of our device.
+  static void whiteListAdd(BLEAddress address);                                             // Add an entry to the BLE white list.
+  static void whiteListRemove(BLEAddress address);                                          // Remove an entry from the BLE white list.
   static void setEncryptionLevel(esp_ble_sec_act_t level);
   static void setSecurityCallbacks(BLESecurityCallbacks *pCallbacks);
   static esp_err_t setMTU(uint16_t mtu);
   static uint16_t getMTU();
-  static bool getInitialized();  // Returns the state of the device, is it initialized or not?
+  static bool getInitialized(); // Returns the state of the device, is it initialized or not?
   /* move advertising to BLEDevice for saving ram and flash in beacons */
   static BLEAdvertising *getAdvertising();
   static void startAdvertising();
@@ -91,7 +91,7 @@
   static gattc_event_handler m_customGattcHandler;
   static gatts_event_handler m_customGattsHandler;
 
-};  // class BLE
+}; // class BLE
 
 #endif /* CONFIG_BLUEDROID_ENABLED */
 #endif /* SOC_BLE_SUPPORTED */
